//@ sourceMappingURL=hlib.map
// Generated by CoffeeScript 1.6.1
var _ref,
  __hasProp = {}.hasOwnProperty;

if ((_ref = window.hlib) == null) {
  window.hlib = {};
}

if (!String.prototype.format) {
  String.prototype.format = function() {
    var args;
    args = arguments;
    return this.replace(/\{(\d+)\}/g, function(m, n) {
      return args[n];
    });
  };
}

if (!String.prototype.capitalize) {
  String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };
}

if (!Array.prototype.filter) {
  Array.prototype.filter = function(callback) {
    var element, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      element = this[_i];
      if (callback(element)) {
        _results.push(element);
      }
    }
    return _results;
  };
}

window.hlib.OPTS = null;

window.hlib.MESSAGE = null;

window.hlib.INFO = null;

window.hlib.ERROR = null;

window.hlib.WORKING = null;

window.hlib.trace = function() {
  var trace;
  trace = printStackTrace();
  return console.log(trace.join('\n'));
};

window.hlib._g = function(s) {
  var error_data;
  if (s.length <= 0) {
    return '';
  }
  if (!window.hlib.OPTS || !window.hlib.OPTS.i18n_table) {
    return s;
  }
  if (window.hlib.OPTS && window.hlib.OPTS.i18n_table && window.hlib.OPTS.i18n_table.hasOwnProperty(s)) {
    return window.hlib.OPTS.i18n_table[s];
  }
  error_data = {
    error_msg: 'Unknown token',
    token: s
  };
  window.hlib.submit_error(error_data, true);
  return s;
};

window.hlib.disable = function(fid) {
  if (!$('#' + fid).hasClass('disabled')) {
    return $('#' + fid).addClass('disabled');
  }
};

window.hlib.enable = function(fid) {
  return $('#' + fid).removeClass('disabled');
};

window.hlib.enableIcon = function(sel, callback) {
  $(sel).removeAttr('disabled');
  $(sel).unbind('click');
  return $(sel).click(function() {
    callback();
    return false;
  });
};

window.hlib.disableIcon = function(sel) {
  if (window.hlib.mobile === false) {
    $('a[rel=tooltip]').tooltip('hide');
    $('button[rel=tooltip]').tooltip('hide');
  }
  $(sel).attr('disabled', 'disabled');
  $(sel).unbind('click');
  return $(sel).click(function() {
    return false;
  });
};

window.hlib.bind_tooltips = function() {
  $('a[rel=tooltip]').tooltip();
  return $('button[rel=tooltip]').tooltip();
};

window.hlib.dump = function(arr, level) {
  var dumped_text, j, k, level_padding, v, _i;
  dumped_text = '';
  if (!level) {
    level = 0;
  }
  level_padding = '';
  k = level + 1;
  for (j = _i = 0; 0 <= k ? _i < k : _i > k; j = 0 <= k ? ++_i : --_i) {
    level_padding += '    ';
  }
  if (typeof arr === 'object') {
    for (k in arr) {
      v = arr[k];
      if (typeof value === 'object') {
        dumped_text += level_padding + "'" + k + "' ...\n";
        dumped_text += this.dump(v, level + 1);
      } else {
        dumped_text += level_padding + "'" + k + "' => '" + v + "'\n";
      }
    }
  } else {
    dumped_text = '=== ' + arr + ' ===(' + typeof arr + ')';
  }
  return dumped_text;
};

window.hlib.clone = function(obj) {
  var key, newInstance;
  if ((obj == null) || typeof obj !== 'object') {
    return obj;
  }
  newInstance = new obj.constructor();
  for (key in obj) {
    newInstance[key] = clone(obj[key]);
  }
  return newInstance;
};

window.hlib.redirect = function(url) {
  window.location.replace(url);
  return false;
};

window.hlib.setTitle = function(msg) {
  return document.title = msg;
};

window.hlib.format_string = function(str, params) {
  var name, value, __per_param;
  __per_param = function(name, value) {
    return str = str.replace('%(' + name + ')s', value);
  };
  for (name in params) {
    if (!__hasProp.call(params, name)) continue;
    value = params[name];
    __per_param(name, value);
  }
  return str;
};

window.hlib.format_error = function(error) {
  return window.hlib.format_string(window.hlib._g(error.message), error.params);
};

window.hlib.error = function(label, error, beforeClose) {
  return window.hlib.ERROR.show(window.hlib._g(label), window.hlib.format_error(error), beforeClose);
};

window.hlib.submit_error = function(data, dont_show) {
  data.page = window.location.href;
  data.useragent = $.browser;
  if (!data.hasOwnProperty('error_msg')) {
    data.error_msg = 'Unknown error';
  }
  $.post('/submit_error', data, function() {});
  if (dont_show) {
    return;
  }
  return window.hlib.error('Unhandled error', {
    message: 'Something unexpected has happened. Error report has been sent to server. Please, reload page using F5 key',
    params: null
  });
};

window.hlib.setup = function(opts) {
  window.onerror = function(error_msg, file, line_number) {
    return window.hlib.submit_error({
      error_msg: error_msg,
      file: file,
      line_number: line_number
    });
  };
  window.hlib.OPTS = opts;
  window.hlib.MESSAGE = new window.hlib.MessageDialog(opts.message_dialog);
  window.hlib.INFO = new window.hlib.InfoDialog(opts.message_dialog);
  window.hlib.ERROR = new window.hlib.ErrorDialog(opts.message_dialog);
  window.hlib.WORKING = new window.hlib.WorkingDialog(opts.message_dialog);
  $(opts.message_dialog).modal({
    show: false
  });
  window.hlib.mobile = false;
  if ($(opts.visibility_check_eid).css('display') === 'none') {
    return window.hlib.mobile = true;
  }
};
