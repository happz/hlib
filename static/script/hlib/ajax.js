//@ sourceMappingURL=ajax.map
// Generated by CoffeeScript 1.6.1
var _ref;

if ((_ref = window.hlib) == null) {
  window.hlib = {};
}

window.hlib.Ajax = (function() {

  function Ajax(opts) {
    var default_options, focus_elements, _ajax;
    _ajax = this;
    default_options = {
      method: 'POST',
      timeout: 20000,
      data: {},
      keep_focus: false,
      show_spinner: true,
      handlers: {
        h303: function(response, ajax) {
          return window.hlib.redirect(response.redirect.url);
        },
        h403: function(response, ajax) {
          return window.hlib.error('', response.error);
        },
        h500: function(response, ajax) {
          return window.hlib.error('Internal error', response.error);
        },
        error: function(ajax, response, jqXHR, textStatus) {
          return window.hlib.submit_error({
            error_msg: 'AJAX failed',
            text_status: textStatus,
            response: response,
            url: ajax.opts.url,
            data: ajax.opts.data,
            jqXHR: jqXHR
          });
        }
      }
    };
    this.opts = $.extend(true, {}, default_options, opts);
    focus_elements = $(document.activeElement);
    $.ajax({
      dataType: 'json',
      type: _ajax.opts.method,
      url: _ajax.opts.url,
      data: _ajax.opts.data,
      cache: false,
      timeout: _ajax.opts.timeout,
      async: true,
      statusCode: {
        500: function() {
          return window.hlib.error('Server error', {
            message: 'Oh no! Server suddenly went away. Be sure we are all freaking out - take a break, get a coffee, and try again in 5 minutes or so.'
          });
        }
      },
      beforeSend: function() {
        if (_ajax.opts.show_spinner === true) {
          return window.hlib.WORKING.show();
        }
      },
      complete: function(jqXHR, textStatus) {
        var handler, handler_name, response;
        response = $.parseJSON(jqXHR.responseText);
        if (textStatus !== 'success') {
          _ajax.opts.handlers.error(_ajax, response, jqXHR, textStatus);
          return;
        }
        handler_name = 'h' + response.status;
        if (!_ajax.opts.handlers.hasOwnProperty(handler_name)) {
          window.hlib.submit_error({
            error_msg: 'No handler for response status',
            response: response,
            opts: _ajax.opts,
            url: _ajax.opts.url
          });
          return;
        }
        handler = _ajax.opts.handlers[handler_name];
        handler(response, _ajax);
        if (_ajax.opts.keep_focus && focus_elements[0] && focus_elements[0].id) {
          return $('#' + focus_elements[0].id).focus();
        }
      },
      error: function(jqXHR, textStatus, errorThrown) {
        var response;
        response = $.parseJSON(jqXHR.responseText);
        return _ajax.opts.handlers.error(_ajax, response, jqXHR, textStatus);
      }
    });
  }

  return Ajax;

})();
