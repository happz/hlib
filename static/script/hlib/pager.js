//@ sourceMappingURL=pager.map
// Generated by CoffeeScript 1.6.1
var _ref;

if ((_ref = window.hlib) == null) {
  window.hlib = {};
}

window.hlib.Pager = (function() {

  function Pager(opts) {
    var default_options, _pager;
    default_options = {
      after_refresh: function(response, pager) {}
    };
    this.opts = $.extend(true, {}, default_options, opts);
    _pager = this;
    this.start = opts.start;
    this.length = opts.length;
    this.items = null;
    $(this.opts.eid + ' .' + this.opts.id_prefix + '-first').click(function() {
      _pager.first();
      return false;
    });
    $(this.opts.eid + ' .' + this.opts.id_prefix + '-last').click(function() {
      _pager.last();
      return false;
    });
    $(this.opts.eid + ' .' + this.opts.id_prefix + '-prev').click(function() {
      _pager.prev();
      return false;
    });
    $(this.opts.eid + ' .' + this.opts.id_prefix + '-next').click(function() {
      _pager.next();
      return false;
    });
  }

  Pager.prototype.refresh = function() {
    var data, _pager;
    _pager = this;
    data = {
      start: _pager.start,
      length: _pager.length
    };
    $.extend(data, _pager.opts.data);
    return new window.hlib.Ajax({
      url: _pager.opts.url,
      data: data,
      handlers: {
        h200: function(response, _ajax) {
          var record, _i, _len, _ref1;
          _pager.items = response.page.cnt_total;
          $(_pager.opts.eid + ' tbody').html('');
          _ref1 = response.page.records;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            record = _ref1[_i];
            $(_pager.opts.eid + ' tbody').append(_pager.opts.template(record));
          }
          $(_pager.opts.eid + ' .' + _pager.opts.id_prefix + '-position').html('' + (_pager.start + 1) + '. - ' + (Math.min(_pager.items, _pager.start + response.page.cnt_display)) + '. z ' + _pager.items);
          _pager.opts.after_refresh(response, _pager);
          return window.hlib.MESSAGE.hide();
        }
      }
    });
  };

  Pager.prototype.first = function() {
    this.start = 0;
    return this.refresh();
  };

  Pager.prototype.last = function() {
    this.start = (Math.floor(this.items / this.length)) * this.length;
    return this.refresh();
  };

  Pager.prototype.prev = function() {
    this.start = Math.max(0, this.start - this.length);
    return this.refresh();
  };

  Pager.prototype.next = function() {
    this.start = Math.min(this.items - 1, this.start + this.length);
    return this.refresh();
  };

  return Pager;

})();
