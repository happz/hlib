//@ sourceMappingURL=form.map
// Generated by CoffeeScript 1.6.1
var _ref,
  __hasProp = {}.hasOwnProperty;

if ((_ref = window.hlib) == null) {
  window.hlib = {};
}

window.hlib.FormField = (function() {

  function FormField(fid, form) {
    this.fid = fid;
    this.form = form;
    this.on_enabled = null;
    this.on_disable = null;
  }

  FormField.prototype.mark_error = function() {
    $(this.fid).parent().parent().addClass('error').focus().val('');
    this.form.last_invalid_field = this;
    return this;
  };

  FormField.prototype.unmark_error = function() {
    $(this.fid).parent().parent().removeClass('error');
    $(this.fid).focus();
    this.form.last_invalid_field = null;
    return this;
  };

  FormField.prototype.enable = function(handler) {
    if (handler) {
      this.on_enable = handler;
    } else {
      $(this.fid).removeAttr('disabled');
      $(this.fid).removeAttr('placeholder');
      if (this.on_enable) {
        this.on_enable(this);
      }
    }
    return this;
  };

  FormField.prototype.disable = function(handler) {
    if (handler) {
      this.on_disable = handler;
    } else {
      $(this.fid).attr('disabled', 'disabled');
      if (this.on_disable) {
        this.on_disable(this);
      }
    }
    return this;
  };

  FormField.prototype.empty = function() {
    $(this.fid).html('');
    return this;
  };

  FormField.prototype.placeholder = function(text) {
    if (text) {
      if ($(this.fid).prop('tagName') === 'SELECT') {
        $(this.fid).html('').prepend('<option value="" disabled="disabled">' + text + '</option>').val('');
      } else {
        $(this.fid).attr('placeholder', text).val('');
      }
      return this;
    } else {
      return $(this.fid).attr('placeholder');
    }
  };

  FormField.prototype.content = function(html) {
    if (html) {
      $(this.fid).html(html);
      return this;
    } else {
      return $(this.fid).html();
    }
  };

  FormField.prototype.value = function(val) {
    if (val) {
      $(this.fid).val(val);
      return this;
    } else {
      return $(this.fid).val();
    }
  };

  FormField.prototype.hide = function() {
    $(this.fid).hide();
    return this;
  };

  FormField.prototype.show = function() {
    $(this.fid).show();
    return this;
  };

  return FormField;

})();

window.hlib.FormInfo = (function() {

  function FormInfo(form) {
    this.form = form;
    this.eid = this.form.fid + ' .form-info';
  }

  FormInfo.prototype._show = function(msg, title, cls) {
    $(this.eid + ' strong').html('');
    $(this.eid).removeClass('alert-error');
    $(this.eid).removeClass('alert-success');
    $(this.form.fid + ' p').html(msg);
    $(this.eid + ' strong').html('');
    if (title) {
      $(this.eid + ' strong').html(title);
    }
    if (cls) {
      $(this.eid).addClass(cls);
    }
    return $(this.eid).show();
  };

  FormInfo.prototype._hide = function() {
    return $(this.eid).hide();
  };

  FormInfo.prototype.error = function(msg) {
    return this._show(msg, window.hlib._g('Error!'), 'alert-error');
  };

  FormInfo.prototype.success = function(msg, dont_fade) {
    this._show(msg, '', 'alert-success');
    if (dont_fade) {
      return;
    }
    return $(this.eid).fadeOut(3000);
  };

  return FormInfo;

})();

window.hlib.Form = (function() {

  Form.prototype.clear = function() {
    var name, _i, _len, _ref1, _results;
    _ref1 = this.opts.clear_fields;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      name = _ref1[_i];
      _results.push($(this.field_id(name)).val(''));
    }
    return _results;
  };

  function Form(opts) {
    var f, _form, _i, _len, _ref1;
    this.default_options = {
      fid: null,
      timeout: 10000,
      focus: null,
      clear_fields: [],
      disable_fields: [],
      submit_empty: false,
      refill: false,
      validate: null,
      handlers: {
        h200: function(response, form) {
          if (response.hasOwnProperty('form') && response.form && response.form.hasOwnProperty('updated_fields')) {
            form.update_fields(response.form.updated_fields);
          }
          return form.info.success('Successfully changed');
        },
        h303: function(response, form) {
          return window.hlib.redirect(response.redirect.url);
        },
        h400: function(response, form) {
          form.invalid_field(response).mark_error();
          return form.info.error(window.hlib.format_error(response.error));
        },
        h401: function(response, form) {
          return window.hlib.error('Unauthorized', response.error);
        },
        h402: function(response, form) {
          return window.hlib.error('Conflict error', response.error);
        },
        h403: function(response, form) {
          form.invalid_field(response).mark_error();
          return form.info.error(window.hlib.format_error(response.error));
        },
        h500: function(response, form) {
          return window.hlib.error('Internal error', response.error);
        }
      }
    };
    _form = this;
    this.opts = $.extend(true, {}, this.default_options, opts);
    this.fid = '#' + this.opts.fid + '_form';
    this.info = new window.hlib.FormInfo(this);
    this.fields = {};
    this.last_invalid_field = null;
    if (!this.opts.validate) {
      this.opts.validate = $(this.fid).attr('data-validate') === 'true';
    }
    this.form_opts = {
      dataType: 'json',
      timeout: this.opts.timeout,
      success: function(response) {
        var handler, handler_name, key, value, _ref1;
        window.hlib.MESSAGE.hide();
        _form.clear();
        if (response.status !== 200 && _form.opts.refill === true && response.form.hasOwnProperty('orig_fields')) {
          _ref1 = response.form.orig_fields;
          for (key in _ref1) {
            if (!__hasProp.call(_ref1, key)) continue;
            value = _ref1[key];
            $(_form.field_id(key)).val(value);
          }
        }
        handler_name = 's' + response.status;
        if (!_form.opts.handlers.hasOwnProperty(handler_name)) {
          handler_name = 'h' + response.status;
          if (!_form.opts.handlers.hasOwnProperty(handler_name)) {
            return window.hlib.submit_error({
              error_msg: 'No handler for response status',
              response: response,
              opts: _form.opts
            });
          }
        }
        handler = _form.opts.handlers[handler_name];
        return handler(response, _form);
      },
      beforeSerialize: function(f, o) {
        if (_form.opts.submit_empty !== true) {
          f.find(':input[value=""]').attr('disabled', 'disabled');
        }
        return true;
      },
      beforeSubmit: function(a, f, o) {
        f.find(':input[value=""]').removeAttr('disabled');
        _form.info._hide();
        if (_form.last_invalid_field) {
          _form.last_invalid_field.unmark_error();
        }
        if (_form.opts.validate) {
          if (_form.opts.validate) {
            $(_form.fid).parsley({
              successClass: null,
              errorClass: null,
              errors: {
                errorsWrapper: null,
                errorElem: null
              },
              listeners: {
                onFieldValidate: function(elem) {
                  return !$(elem).is(':visible');
                },
                onFieldError: function(element, constraints, parsley_field) {
                  if (_form.last_invalid_field) {
                    return;
                  }
                  _form.last_invalid_field = _form.field($(element).attr('name')).mark_error();
                  if (parsley_field.options.errorMessage) {
                    return _form.info.error(window.hlib._g(parsley_field.options.errorMessage));
                  }
                }
              }
            });
            $(_form.fid).parsley('validate');
            $(_form.fid).parsley('destroy');
          }
          if (_form.last_invalid_field) {
            return false;
          }
        }
        window.hlib.WORKING.show();
        return true;
      }
    };
    $(this.fid).on('submit', function(event) {
      event.preventDefault();
      $(_form.fid).ajaxSubmit(_form.form_opts);
      return false;
    });
    this.clear();
    if (this.opts.focus) {
      $(this.field_id(_form.opts.focus)).focus();
    }
    _ref1 = this.opts.disable_fields;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      f = _ref1[_i];
      (this.field(f)).disable();
    }
  }

  Form.prototype.submit = function() {
    return $(this.fid).ajaxSubmit(this.form_opts);
  };

  Form.prototype.field_id = function(name) {
    return '#' + this.opts.fid + '_' + name;
  };

  Form.prototype.field = function(name) {
    if (!this.fields.hasOwnProperty(name)) {
      this.fields[name] = new window.hlib.FormField(this.field_id(name), this);
    }
    return this.fields[name];
  };

  Form.prototype.invalid_field = function(response) {
    if (!response.hasOwnProperty('form') || !response.form || !response.form.hasOwnProperty('invalid_field')) {
      return null;
    }
    return this.field(response.form.invalid_field);
  };

  Form.prototype.update_fields = function(fields) {
    var f, v, _results;
    _results = [];
    for (f in fields) {
      v = fields[f];
      _results.push($(this.field_id(f)).val(v));
    }
    return _results;
  };

  return Form;

})();
